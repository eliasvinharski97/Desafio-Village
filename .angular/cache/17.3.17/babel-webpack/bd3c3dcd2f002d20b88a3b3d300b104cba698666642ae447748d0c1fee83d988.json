{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AccountOperationsComponent = class AccountOperationsComponent {\n  constructor(route, http, fb) {\n    this.route = route;\n    this.http = http;\n    this.fb = fb;\n    this.account = null;\n    this.depositForm = this.fb.group({\n      amount: ['', [Validators.required, Validators.min(0.01)]]\n    });\n    this.withdrawForm = this.fb.group({\n      amount: ['', [Validators.required, Validators.min(0.01)]]\n    });\n  }\n  ngOnInit() {\n    const accountId = this.route.snapshot.paramMap.get('id');\n    if (accountId) {\n      this.loadAccount(accountId);\n    }\n  }\n  loadAccount(id) {\n    this.http.get(`/api/accounts/${id}`).subscribe({\n      next: account => {\n        this.account = account;\n      },\n      error: error => {\n        console.error('Error loading account:', error);\n        alert('Error loading account details.');\n      }\n    });\n  }\n  onDeposit() {\n    if (this.depositForm.valid && this.account) {\n      this.http.post(`/api/accounts/${this.account.id}/deposit`, {\n        amount: this.depositForm.value.amount\n      }).subscribe({\n        next: () => {\n          this.loadAccount(this.account.id);\n          this.depositForm.reset();\n        },\n        error: error => {\n          console.error('Error making deposit:', error);\n          alert('Error making deposit. Please try again.');\n        }\n      });\n    }\n  }\n  onWithdraw() {\n    if (this.withdrawForm.valid && this.account) {\n      this.http.post(`/api/accounts/${this.account.id}/withdraw`, {\n        amount: this.withdrawForm.value.amount\n      }).subscribe({\n        next: () => {\n          this.loadAccount(this.account.id);\n          this.withdrawForm.reset();\n        },\n        error: error => {\n          console.error('Error making withdrawal:', error);\n          alert('Error making withdrawal. Please try again.');\n        }\n      });\n    }\n  }\n  toggleAccountStatus() {\n    if (this.account) {\n      const endpoint = this.account.active ? 'block' : 'activate';\n      this.http.post(`/api/accounts/${this.account.id}/${endpoint}`, {}).subscribe({\n        next: () => {\n          this.loadAccount(this.account.id);\n        },\n        error: error => {\n          console.error('Error toggling account status:', error);\n          alert('Error changing account status. Please try again.');\n        }\n      });\n    }\n  }\n};\nAccountOperationsComponent = __decorate([Component({\n  selector: 'app-account-operations',\n  template: `\n    <div class=\"card mb-4\" *ngIf=\"account\">\n      <div class=\"card-header\">\n        <h2>Account Details</h2>\n      </div>\n      <div class=\"card-body\">\n        <p><strong>Account ID:</strong> {{account.id}}</p>\n        <p><strong>Balance:</strong> {{account.balance | currency}}</p>\n        <p><strong>Daily Withdrawal Limit:</strong> {{account.dailyWithdrawalLimit | currency}}</p>\n        <p><strong>Status:</strong> {{account.active ? 'Active' : 'Blocked'}}</p>\n      </div>\n    </div>\n\n    <div class=\"card mb-4\">\n      <div class=\"card-header\">\n        <h3>Deposit</h3>\n      </div>\n      <div class=\"card-body\">\n        <form [formGroup]=\"depositForm\" (ngSubmit)=\"onDeposit()\">\n          <div class=\"mb-3\">\n            <label for=\"depositAmount\" class=\"form-label\">Amount</label>\n            <input type=\"number\" class=\"form-control\" id=\"depositAmount\" formControlName=\"amount\">\n          </div>\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!depositForm.valid\">Deposit</button>\n        </form>\n      </div>\n    </div>\n\n    <div class=\"card mb-4\">\n      <div class=\"card-header\">\n        <h3>Withdraw</h3>\n      </div>\n      <div class=\"card-body\">\n        <form [formGroup]=\"withdrawForm\" (ngSubmit)=\"onWithdraw()\">\n          <div class=\"mb-3\">\n            <label for=\"withdrawAmount\" class=\"form-label\">Amount</label>\n            <input type=\"number\" class=\"form-control\" id=\"withdrawAmount\" formControlName=\"amount\">\n          </div>\n          <button type=\"submit\" class=\"btn btn-warning\" [disabled]=\"!withdrawForm.valid\">Withdraw</button>\n        </form>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h3>Account Status</h3>\n      </div>\n      <div class=\"card-body\">\n        <button class=\"btn btn-danger\" (click)=\"toggleAccountStatus()\">\n          {{account?.active ? 'Block Account' : 'Activate Account'}}\n        </button>\n      </div>\n    </div>\n  `,\n  styles: []\n})], AccountOperationsComponent);\nexport { AccountOperationsComponent };","map":{"version":3,"names":["Component","Validators","AccountOperationsComponent","constructor","route","http","fb","account","depositForm","group","amount","required","min","withdrawForm","ngOnInit","accountId","snapshot","paramMap","get","loadAccount","id","subscribe","next","error","console","alert","onDeposit","valid","post","value","reset","onWithdraw","toggleAccountStatus","endpoint","active","__decorate","selector","template","styles"],"sources":["C:\\Users\\elias\\Downloads\\demo\\demo\\src\\app\\components\\account-operations\\account-operations.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\ninterface Account {\r\n  id: string;\r\n  balance: number;\r\n  dailyWithdrawalLimit: number;\r\n  active: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-account-operations',\r\n  template: `\r\n    <div class=\"card mb-4\" *ngIf=\"account\">\r\n      <div class=\"card-header\">\r\n        <h2>Account Details</h2>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <p><strong>Account ID:</strong> {{account.id}}</p>\r\n        <p><strong>Balance:</strong> {{account.balance | currency}}</p>\r\n        <p><strong>Daily Withdrawal Limit:</strong> {{account.dailyWithdrawalLimit | currency}}</p>\r\n        <p><strong>Status:</strong> {{account.active ? 'Active' : 'Blocked'}}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-header\">\r\n        <h3>Deposit</h3>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form [formGroup]=\"depositForm\" (ngSubmit)=\"onDeposit()\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"depositAmount\" class=\"form-label\">Amount</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"depositAmount\" formControlName=\"amount\">\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!depositForm.valid\">Deposit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-header\">\r\n        <h3>Withdraw</h3>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form [formGroup]=\"withdrawForm\" (ngSubmit)=\"onWithdraw()\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"withdrawAmount\" class=\"form-label\">Amount</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"withdrawAmount\" formControlName=\"amount\">\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-warning\" [disabled]=\"!withdrawForm.valid\">Withdraw</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <h3>Account Status</h3>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <button class=\"btn btn-danger\" (click)=\"toggleAccountStatus()\">\r\n          {{account?.active ? 'Block Account' : 'Activate Account'}}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class AccountOperationsComponent implements OnInit {\r\n  account: Account | null = null;\r\n  depositForm: FormGroup;\r\n  withdrawForm: FormGroup;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private http: HttpClient,\r\n    private fb: FormBuilder\r\n  ) {\r\n    this.depositForm = this.fb.group({\r\n      amount: ['', [Validators.required, Validators.min(0.01)]]\r\n    });\r\n    this.withdrawForm = this.fb.group({\r\n      amount: ['', [Validators.required, Validators.min(0.01)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    const accountId = this.route.snapshot.paramMap.get('id');\r\n    if (accountId) {\r\n      this.loadAccount(accountId);\r\n    }\r\n  }\r\n\r\n  loadAccount(id: string) {\r\n    this.http.get<Account>(`/api/accounts/${id}`).subscribe({\r\n      next: (account) => {\r\n        this.account = account;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading account:', error);\r\n        alert('Error loading account details.');\r\n      }\r\n    });\r\n  }\r\n\r\n  onDeposit() {\r\n    if (this.depositForm.valid && this.account) {\r\n      this.http.post(`/api/accounts/${this.account.id}/deposit`, {\r\n        amount: this.depositForm.value.amount\r\n      }).subscribe({\r\n        next: () => {\r\n          this.loadAccount(this.account!.id);\r\n          this.depositForm.reset();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error making deposit:', error);\r\n          alert('Error making deposit. Please try again.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onWithdraw() {\r\n    if (this.withdrawForm.valid && this.account) {\r\n      this.http.post(`/api/accounts/${this.account.id}/withdraw`, {\r\n        amount: this.withdrawForm.value.amount\r\n      }).subscribe({\r\n        next: () => {\r\n          this.loadAccount(this.account!.id);\r\n          this.withdrawForm.reset();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error making withdrawal:', error);\r\n          alert('Error making withdrawal. Please try again.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleAccountStatus() {\r\n    if (this.account) {\r\n      const endpoint = this.account.active ? 'block' : 'activate';\r\n      this.http.post(`/api/accounts/${this.account.id}/${endpoint}`, {}).subscribe({\r\n        next: () => {\r\n          this.loadAccount(this.account!.id);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error toggling account status:', error);\r\n          alert('Error changing account status. Please try again.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}